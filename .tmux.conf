
# Reload tmux config
bind r source-file ~/.tmux.conf\; display "Reloaded .tmux.conf"

# Version-specific configuration
#
# Simplified from https://stackoverflow.com/questions/35016458/how-to-write-if-statement-in-tmux-conf-to-set-different-options-for-different-t/41891448#41891448
#     run-shell "for conf in ~/.tmux/$(tmux -V | cut -d' ' -f2)/*.conf; do tmux source-file \"\$conf\"; done"
#     Where version-specific configuration can be placed in ~/.tmux/${TMUX_VERSION}/*.conf
# NOTE: line currently not being detected/run on tmux 2.6
# run-shell "tmux source-file ~/rcfiles/.tmux_$(tmux -V | cut -d' ' -f2).conf"
#
# Get tmux version
run-shell "tmux setenv -g TMUX_VERSION $(tmux -V | cut -c 6-8)"

# vi-like navigation within a buffer
setw -g mode-keys vi

# Enter copy-mode and paste
bind-key v copy-mode
bind-key p paste-buffer

# Bindings for copy-mode
#
# https://superuser.com/questions/395158/tmux-copy-mode-select-text-block
# It is important to unbind default rectangle-toggle binding, otherwise new 'C-v' binding doesn't work.
# Begin selection in copy mode.
# Begin selection in copy mode.
# Yank selection in copy mode.
# Yank until end of line in copy mode.
#
# NOTE: untested for < 2.4
if-shell -b '[ "$(echo "$TMUX_VERSION < 2.4" | bc)" = 1 ]' \
    'unbind-key -t vi-copy v; \
    bind-key -t vi-copy v begin-selection; \
    bind-key -t vi-copy C-v rectangle-toggle; \
    bind-key -t vi-copy y copy-selection; \
    bind-key -t vi-copy Y copy-end-of-line'
#
# for >= 2.4
# Adapted from 
# https://shapeshed.com/custom-vim-bindings-in-tmux-2-4/
# https://superuser.com/questions/395158/tmux-copy-mode-select-text-block
if-shell -b '[ "$(echo "$TMUX_VERSION >= 2.4" | bc)" = 1 ]' \
    'bind-key -T copy-mode-vi v send-keys -X begin-selection; \
    bind-key -T copy-mode-vi C-v send-keys -X rectangle-toggle \; send -X begin-selection; \
    bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xclip -in -selection clipboard"'
    # bind-key -T copy-mode-vi y send-keys -X copy-selection-and-cancel'

# Enable mouse (>= 2.1)
# if-shell '[ $(echo "$(tmux -V | cut -d" " -f2) >= 2.1" | bc) -eq 1 ]' \
#     'set-option -g mouse on' \
#     ''

# Start window numbering at r
# 0 is too far from ` ;)
set -g base-index 1

# Automatically set window title
set -g automatic-rename on
set -g set-titles on

# Set to 256 colors
set -g default-terminal screen-256color

# Increase history limit
set -g history-limit 10000

# No delay for escape key press
set -sg escape-time 0

# THEME
set -g status-bg black
set -g status-fg white
# NOTE: Options renamed in >=2.9
# https://unix.stackexchange.com/questions/570634/why-are-many-of-my-tmux-setup-commands-giving-errors/570635#570635
# set -g window-status-current-bg white
# set -g window-status-current-fg black
# set -g window-status-current-attr bold
set -g window-status-current-style bg=white
set -g window-status-current-style fg=black
set -g window-status-current-style bold
set -g status-interval 60
set -g status-left-length 30
set -g status-left '#[fg=green](#S) #(whoami)'
set -g status-right '#[fg=yellow]#(cut -d " " -f 1-3 /proc/loadavg)#[default] #[fg=white]%H:%M#[default]'

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
# NOTE: This requires tmux v1.8 or higher.
# is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    # | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
    # bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
    # bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
    # bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
    # bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
    # bind-key -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# After latest tmux update (1.9) default-path has been removed, which means that
# new windows and pane split's doesn't keep your current directory, a work around
# this is passing -c option
# https://coderwall.com/p/jpsa7q/tmux-windows-and-pane-split-s-on-current-directory
#
bind-key c new-window -c "#{pane_current_path}"
bind-key % split-window -h -c "#{pane_current_path}"
bind-key '"' split-window -v -c "#{pane_current_path}"

# switch between tmux panes.
bind -n M-h select-pane -L
bind -n M-j select-pane -D
bind -n M-k select-pane -U
bind -n M-l select-pane -R

# smooth transition moving from tmux pane to vim pane and back.
# is_view_vim_diff="echo '#{pane_current_command}' | grep -iqE '(view|vim)(diff)?'"
# bind -n C-h run "$is_view_vim_diff && tmux send-keys C-h || tmux select-pane -L"
# bind -n C-j run "$is_view_vim_diff && tmux send-keys C-j || tmux select-pane -D"
# bind -n C-k run "$is_view_vim_diff && tmux send-keys C-k || tmux select-pane -U"
# bind -n C-l run "$is_view_vim_diff && tmux send-keys C-l || tmux select-pane -R"

# switch windows
bind -n C-h previous-window
bind -n C-l next-window

# move windows by 1 spot, renumbering other windows
# https://superuser.com/questions/343572/how-do-i-reorder-tmux-windows
bind-key -n C-M-h swap-window -t -1
bind-key -n C-M-l swap-window -t +1

